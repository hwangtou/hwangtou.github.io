<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-02-03T13:10:25+08:00</updated><id>//</id><title type="html">hwangtou’s tech blog</title><subtitle>C Programmer, Event-Driven Prgramming
</subtitle><entry><title type="html">Nginx Src Studying Configure Script</title><link href="/2017/02/02/nginx-src-studying-configure-script.html" rel="alternate" type="text/html" title="Nginx Src Studying Configure Script" /><published>2017-02-02T00:00:00+08:00</published><updated>2017-02-02T00:00:00+08:00</updated><id>/2017/02/02/nginx-src-studying-configure-script</id><content type="html" xml:base="/2017/02/02/nginx-src-studying-configure-script.html">&lt;h1 id=&quot;安裝配置腳本草稿&quot;&gt;安裝配置腳本（草稿）&lt;/h1&gt;
&lt;p&gt;在研究nginx之前，我總是覺得configure和Makefile深不可測，自己的項目用得最多的就是CMake。而當我研究nginx之後，我發現configure也並不難，configure其實就是一個bash腳本。接下來讓以configure script作為入口，分析nginx的configure思路。&lt;/p&gt;

&lt;p&gt;第1行代碼證明這是一個bash腳本，當我們在執行configure腳本時，shell會用/bin/sh程序來對configure文件進行解析。&lt;/p&gt;

&lt;p&gt;第3、4行是版權信息，還有大神Igor Sysoev的“簽名”。&lt;/p&gt;

&lt;p&gt;第7、8行的目的是去除shell中的本地化設置（所有LC_*設置值），讓命令能夠正確地運行。LC for Locale，LC_ALL是軟件在運行時的語言環境，包括語言（Language）、地域（Territory）和字符集（Code set）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 1~12

&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copyright (C) Igor Sysoev&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Copyright (C) Nginx, Inc.&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;LC_ALL

. auto/options
. auto/init
. auto/sources

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第10到12行執行auto目錄下的三個腳本：auto/options腳本，顧名思義，是用於處理configure命令的附加選項。在該腳本的6～166行，先是聲明了一系列的配置相關變量並賦予默認初值。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/options 6~166
&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no

&lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_SBIN_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_MODULES_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
...

&lt;span class=&quot;nv&quot;&gt;NGX_CPU_CACHE_LINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;168～394行，這是一個用於處理configure所帶參數的for循環，語句&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/options 168~394

&lt;span class=&quot;nv&quot;&gt;NGX_POST_CONF_MSG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;option
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$opt&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$option&lt;/span&gt; | sed -e &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;s/&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;--[^&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)\(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;/&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\2'&lt;/span&gt;/&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$option&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        -&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$option&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | sed -e &lt;span class=&quot;s1&quot;&gt;'s/[-_a-zA-Z0-9]*=//'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$option&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        --help&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                          &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes                   &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

        --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                       &lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                      &lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        --sbin-path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
...

        --test-build-devpoll&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;NGX_TEST_BUILD_DEVPOLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YES &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        --test-build-eventport&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;NGX_TEST_BUILD_EVENTPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YES &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        --test-build-epoll&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;NGX_TEST_BUILD_EPOLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YES   &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        --test-build-solaris-sendfilev&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;NGX_TEST_BUILD_SOLARIS_SENDFILEV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YES &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: error: invalid option &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$option&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```bash 397~574
// auto/options&lt;/p&gt;

&lt;p&gt;NGX_CONFIGURE=”$opt”&lt;/p&gt;

&lt;p&gt;if [ $help = yes ]; then&lt;/p&gt;

&lt;p&gt;cat « END&lt;/p&gt;

&lt;p&gt;–help                             print this message&lt;/p&gt;

&lt;p&gt;–prefix=PATH                      set installation prefix
  –sbin-path=PATH                   set nginx binary pathname
  –modules-path=PATH                set modules path
  –conf-path=PATH                   set nginx.conf pathname
  –error-log-path=PATH              set error log pathname
…&lt;/p&gt;

&lt;p&gt;–with-openssl=DIR                 set path to OpenSSL library sources
  –with-openssl-opt=OPTIONS         set additional build options for OpenSSL&lt;/p&gt;

&lt;p&gt;–with-debug                       enable debug logging&lt;/p&gt;

&lt;p&gt;END&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit 1 fi ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;餘下的代碼大概是HTTP功能開關的設置，是否為Win32平台編譯的設置，和nginx目錄文件配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HTTP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; NO &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HTTP_CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_GZIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_SSI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_USERID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_ACCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_REWRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
    &lt;span class=&quot;nv&quot;&gt;HTTP_FASTCGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NO
&lt;span class=&quot;k&quot;&gt;fi


if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.win32&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_WINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WINE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi


&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_SBIN_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_SBIN_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sbin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/nginx&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_MODULES_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_MODULES_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_CONF_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_CONF_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/nginx.conf&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_CONF_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$NGX_CONF_PATH&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_PID_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_PID_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/nginx.pid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_LOCK_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_LOCK_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/nginx.lock&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_ERROR_LOG_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.stderr&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_ERROR_LOG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_ERROR_LOG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_ERROR_LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/error.log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_LOG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/access.log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_CLIENT_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_CLIENT_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client_body_temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_PROXY_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_PROXY_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proxy_temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_FASTCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_FASTCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fastcgi_temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_UWSGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_UWSGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uwsgi_temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_SCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_HTTP_SCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scgi_temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PERL_MODULES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    ./&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    .&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;NGX_PERL_MODULES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PREFIX&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$NGX_PERL_MODULES&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;auto/init腳本，定義了Makefile文件路徑變量（NGX_MAKEFILE）、nginx模塊選項源文件路徑變量（NX_MODULE_S_C）、configure腳本生成的項目頭文件路徑變量（NGX_AUTO_HEADERS_H、NGX_AUTO_CONFIG_H）、自動測試文件路徑變量（NGX_AUTOTEST）、自動配置錯誤文件路徑變量（NGX_AUTOCONF_ERR），以及Makefile文件路徑變量（MAKEFILE）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/init 6~21

&lt;span class=&quot;nv&quot;&gt;NGX_MAKEFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/Makefile
&lt;span class=&quot;nv&quot;&gt;NGX_MODULES_C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/ngx_modules.c

&lt;span class=&quot;nv&quot;&gt;NGX_AUTO_HEADERS_H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/ngx_auto_headers.h
&lt;span class=&quot;nv&quot;&gt;NGX_AUTO_CONFIG_H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/ngx_auto_config.h

&lt;span class=&quot;nv&quot;&gt;NGX_AUTOTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/autotest
&lt;span class=&quot;nv&quot;&gt;NGX_AUTOCONF_ERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/autoconf.err

&lt;span class=&quot;c&quot;&gt;# STUBs&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_ERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/autoconf.err
&lt;span class=&quot;nv&quot;&gt;MAKEFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;/Makefile


&lt;span class=&quot;nv&quot;&gt;NGX_PCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NGX_USE_PCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;測試當前環境shell顯示字符串-n和\c的能力，因為不同系統的shell對此存在兼容性差別。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/init 24~40

&lt;span class=&quot;c&quot;&gt;# check the echo's &quot;-n&quot; option and &quot;\c&quot; capability&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | grep c &amp;gt;/dev/null; &lt;span class=&quot;k&quot;&gt;then

    if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; | grep n &amp;gt;/dev/null; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ngx_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-n
        &lt;span class=&quot;nv&quot;&gt;ngx_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi

else
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ngx_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後，創建Makefile文件，定義make指令和make clean指令的行為。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/init 43~51

&lt;span class=&quot;c&quot;&gt;# create Makefile&lt;/span&gt;

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END &amp;gt; Makefile

default:	build

clean:
	rm -rf Makefile $NGX_OBJS
END
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;auto/sources，定義core模塊、event模塊等模塊的INCS（include path頭文件搜索路徑）、DEPS（depend headers依賴頭文件列表）、SRCS（source files源文件列表）等變量；以及UNIX、FREEBSD、LINUX等不同操作系統的INCS、DEPS、SRCS變量。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/sources 6~44

&lt;span class=&quot;nv&quot;&gt;CORE_MODULES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ngx_core_module ngx_errlog_module ngx_conf_module&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CORE_INCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/core&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CORE_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/core/nginx.h &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
           src/core/ngx_config.h &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
           src/core/ngx_core.h &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
           src/core/ngx_log.h &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
           src/core/ngx_palloc.h &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
...
           src/core/ngx_syslog.h&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;回到configure文件，第14行，測試objs目錄是否存在，若不存在即創建objs目錄。第16～19行，在命令行上顯示之前配置好的參數。第22～24行，若為調試模式，則往objs/ngx_auto_config.h文件尾部加入NGX_DEBUG為1的宏定義。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 14~24

&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -d &lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkdir -p &lt;span class=&quot;nv&quot;&gt;$NGX_OBJS&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTO_HEADERS_H&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#define NGX_CONFIGURE &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CONFIGURE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTO_CONFIG_H&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NGX_DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_DEBUG . auto/have
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第27到47行，如果NGX_PLATFORM未定義，則用uname命令獲取系統內核名稱、內核版本、機器架構信息（順帶一提，2&amp;gt;/dev/null的意思是把輸出的stderr流拋棄，/dev/null也被稱為“黑洞”），若獲取到的系統內核名稱為“MINGW32”，則把系統名重命名為win32。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 27~47

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for OS&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -s 2&amp;gt;/dev/null&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;NGX_RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -r 2&amp;gt;/dev/null&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;NGX_MACHINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -m 2&amp;gt;/dev/null&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; + &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_RELEASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_MACHINE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_RELEASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_MACHINE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
        &lt;/span&gt;MINGW32_&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;win32
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;building for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第49行執行auto/cc/conf腳本，auto/cc目錄顧名思義就是C編譯器（c compiler）相關配置的目錄。conf腳本為主腳本，定義編譯器相關的變量，然後根據不同的編譯器調用不同的腳本；name腳本用於獲取編譯器名稱；auto/cc目錄下的其它腳本主要用於特定編譯器的配置。&lt;/p&gt;

&lt;p&gt;auto/cc/conf腳本，對編譯器的相關變量進行聲明，再執行auto/cc/name腳本，通過判斷目前平台變量（$NGX_PLATFORM）和編譯器類型變量（$CC）來對相關變量和$NGX_CC_NAME進行初始化，並打印當前使用的編譯器信息“using xxx C Compiler”。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 49

. auto/cc/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第51到53行，如果NGX_PLATFORM不是定義為win32的平台，則執行auto/header腳本，而這個腳本則通過調用auto/include腳本來檢測unistd.h等腳本在該平台下的可運行性。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 51~53

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; win32 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    . auto/headers
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/headers 6~13
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unistd.h&quot;&lt;/span&gt;;      . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inttypes.h&quot;&lt;/span&gt;;    . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;limits.h&quot;&lt;/span&gt;;      . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys/filio.h&quot;&lt;/span&gt;;   . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys/param.h&quot;&lt;/span&gt;;   . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys/mount.h&quot;&lt;/span&gt;;   . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sys/statvfs.h&quot;&lt;/span&gt;; . auto/include
&lt;span class=&quot;nv&quot;&gt;ngx_include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;crypt.h&quot;&lt;/span&gt;;       . auto/include
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;auto/include會為傳入的ngx_include參數生成錯誤紀錄文件和自動測試文件，該測試文件實現簡單的引入頭文件功能並帶有一個main函數，然後用編譯器編譯該自動測試文件，並把編譯命令輸出的結果的錯誤信息重定向輸出到錯誤紀錄文件當中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/include 6~58

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ngx_n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_include&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ...&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END &amp;gt;&amp;gt; $NGX_AUTOCONF_ERR

----------------------------------------
checking for $ngx_include

END


&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END &amp;gt; $NGX_AUTOTEST.c

$NGX_INCLUDE_SYS_PARAM_H
#include &amp;lt;$ngx_include&amp;gt;

int main(void) {
    return 0;
}

END


&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -o &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_AUTOTEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_AUTOTEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.c&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_test&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -x &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOTEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; found&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;ngx_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ngx_include&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              | tr abcdefghijklmnopqrstuvwxyz/. ABCDEFGHIJKLMNOPQRSTUVWXYZ__&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;


    &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HAVE_&lt;span class=&quot;nv&quot;&gt;$ngx_name&lt;/span&gt; . auto/have_headers

    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NGX_INCLUDE_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;='#include &amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_include&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;'&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; not found&quot;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------&quot;&lt;/span&gt;    &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;
    cat &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOTEST&lt;/span&gt;.c  &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------&quot;&lt;/span&gt;    &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ngx_test&lt;/span&gt;       &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------&quot;&lt;/span&gt;    &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOCONF_ERR&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;rm -rf &lt;span class=&quot;nv&quot;&gt;$NGX_AUTOTEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下來用if [ -x ]來判斷編譯輸出的自動測試可執行文件是否存在且為可執行文件，若是，則表明找到了需要引入的頭文件，執行auto/have_headers腳本把其加入到$NGX_AUTO_HEADERS_H頭文件中，而這個文件則是objs/ngx_auto_config.h文件；否則，記錄到錯誤文件中。最後，清理自動測試相關的所有臨時文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/have_headers 6~12

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END &amp;gt;&amp;gt; $NGX_AUTO_HEADERS_H

#ifndef $have
#define $have  1
#endif

END
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;回到configure script，第55行，執行auto/os/conf腳本，該腳本用於初始化不同系統的特性變量，如圖，根據NGX_PLATFORM，執行不同系統的腳本，該特定腳本會檢測當前操作系統環境的相關特性是否可行，然後auto/have腳本把可用的特性加入到objs/ngx_auto_config.h文件中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 55

. auto/os/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/os/conf 6~78

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_SYSTEM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; specific features&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in

    &lt;/span&gt;FreeBSD:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        . auto/os/freebsd
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

...

    GNU:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# GNU Hurd&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_GNU_HURD . auto/have_headers
        &lt;span class=&quot;nv&quot;&gt;CORE_INCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_INCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CORE_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$POSIX_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CORE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_SRCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CC_AUX_FLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC_AUX_FLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CORE_INCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_INCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CORE_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$POSIX_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;CORE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$UNIX_SRCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，除了系統平台特徵的變量初始化，該腳本還會檢測當前CPU架構的Cache Line和內存對齊特性。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/os/conf 81~116
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_MACHINE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in

    &lt;/span&gt;i386 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; i686 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; i86pc&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HAVE_NONALIGNED . auto/have
        &lt;span class=&quot;nv&quot;&gt;NGX_MACH_CACHE_LINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

...

    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_ALIGNMENT &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16 . auto/define
        &lt;span class=&quot;nv&quot;&gt;NGX_MACH_CACHE_LINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CPU_CACHE_LINE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_CPU_CACHE_LINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_MACH_CACHE_LINE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_CPU_CACHE_LINE &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CPU_CACHE_LINE&lt;/span&gt; . auto/define
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;回到configure script，第57～59行，若非win32平台，則執行auto/unix腳本，該腳本首先分析了當前unix環境下的用戶和分組，並賦值給變量。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 57~59

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; win32 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    . auto/unix
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/unix 6~27

&lt;span class=&quot;nv&quot;&gt;NGX_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nobody&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_GROUP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NGX_USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nobody &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
        if &lt;/span&gt;grep nobody /etc/group 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for nobody group ... found&quot;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;NGX_GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nobody
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for nobody group ... not found&quot;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;grep nogroup /etc/group 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for nogroup group ... found&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;NGX_GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nogroup
            &lt;span class=&quot;k&quot;&gt;else
                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;checking for nogroup group ... not found&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;NGX_GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nobody
            &lt;span class=&quot;k&quot;&gt;fi
        fi
    else
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_USER&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下來便是對當前操作系統的unix特徵的一系列的分析，如圖，先賦值給如下變量，然後調用auto/feature腳本，該腳本和上面分析的auto/include腳本同理，通過生成自動測試代碼並編譯之來檢測當前系統是否支持該特性，如果支持，則加入到objs/ngx_auto_config.h文件中，否則則寫入錯誤記錄中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/unix 30~46

&lt;span class=&quot;nv&quot;&gt;ngx_feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poll()&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ngx_feature_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ngx_feature_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;span class=&quot;nv&quot;&gt;ngx_feature_incs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#include &amp;lt;poll.h&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ngx_feature_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ngx_feature_libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ngx_feature_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;int  n; struct pollfd  pl;
                  pl.fd = 0;
                  pl.events = 0;
                  pl.revents = 0;
                  n = poll(&amp;amp;pl, 1, 0);
                  if (n == -1) return 1&quot;&lt;/span&gt;
. auto/feature

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ngx_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EVENT_POLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NONE
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;configure script第61行，執行auto/threads腳本，檢測當前環境對多線程的支持。第62行，執行auto/modules腳本，配置nginx模塊相關的變量並檢測模塊可用性。第63行，執行auto/lib/conf腳本，根據選項配置第三方庫如OpenSSL和zlib等。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 61~63

. auto/threads
. auto/modules
. auto/lib/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/threads 5~20

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USE_THREADS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then

    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PLATFORM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; win32 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END

$0: --with-threads is not supported on Windows

END
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;fi

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_THREADS . auto/have
    &lt;span class=&quot;nv&quot;&gt;CORE_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CORE_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$THREAD_POOL_DEPS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CORE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CORE_SRCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$THREAD_POOL_SRCS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CORE_LIBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CORE_LIBS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -lpthread&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第65～100行，根據目前環境變量中的變量，調用auto/define腳本，把相關變量加入到objs/ngx_auto_config.h文件中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 65~100

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    .&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/usr/local/nginx&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_PREFIX &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    .!&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_PREFIX &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PREFIX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CONF_PREFIX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_CONF_PREFIX &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CONF_PREFIX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_SBIN_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_SBIN_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_CONF_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_CONF_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_PID_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PID_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_LOCK_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_LOCK_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_ERROR_LOG_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_ERROR_LOG_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define

&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_LOG_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_LOG_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_CLIENT_TEMP_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_CLIENT_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
. auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_PROXY_TEMP_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_PROXY_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
. auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_FASTCGI_TEMP_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_FASTCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
. auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_UWSGI_TEMP_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_UWSGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
. auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_HTTP_SCGI_TEMP_PATH &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_HTTP_SCGI_TEMP_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
. auto/define
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第102～104行，auto/make腳本為生成Makefile文件的腳本，auto/lib/make為生成第三方庫Makefile文件的腳本，auto/install腳本生成Makefile文件中的install指令相關的操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 102~104

. auto/make
. auto/lib/make
. auto/install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而在configure script最後，第116行，打印configure的狀態概況。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// configure 106~116

&lt;span class=&quot;c&quot;&gt;# STUB&lt;/span&gt;
. auto/stubs

&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_USER &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_USER&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_GROUP &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_GROUP&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_BUILD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NGX_BUILD &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_BUILD&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; . auto/define
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

. auto/summary
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/summary 6~82

&lt;span class=&quot;nb&quot;&gt;echo
echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Configuration summary&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USE_THREADS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; YES &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  + using threads&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

...

cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; END
  nginx path prefix: &quot;$NGX_PREFIX&quot;
  nginx binary file: &quot;$NGX_SBIN_PATH&quot;
  nginx modules path: &quot;$NGX_MODULES_PATH&quot;
  nginx configuration prefix: &quot;$NGX_CONF_PREFIX&quot;
  nginx configuration file: &quot;$NGX_CONF_PATH&quot;
  nginx pid file: &quot;$NGX_PID_PATH&quot;
END

&lt;/span&gt;...

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_POST_CONF_MSG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><summary type="html">安裝配置腳本（草稿）
在研究nginx之前，我總是覺得configure和Makefile深不可測，自己的項目用得最多的就是CMake。而當我研究nginx之後，我發現configure也並不難，configure其實就是一個bash腳本。接下來讓以configure script作為入口，分析nginx的configure思路。</summary></entry><entry><title type="html">Nginx Src Studying Coding Style</title><link href="/2017/02/02/nginx-src-studying-coding-style.html" rel="alternate" type="text/html" title="Nginx Src Studying Coding Style" /><published>2017-02-02T00:00:00+08:00</published><updated>2017-02-02T00:00:00+08:00</updated><id>/2017/02/02/nginx-src-studying-coding-style</id><content type="html" xml:base="/2017/02/02/nginx-src-studying-coding-style.html">&lt;blockquote&gt;
  &lt;p&gt;If I have been able to see further, it was only because I stood on the shoulder of giants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近我花了不少時間研究nginx的源代碼，確實讓我受益匪淺。果然，當攀上巨人的肩膀去看這個世界時，風光真的和地上的截然不同。回想起之前我研究過的同為server應用框架的skynet，我有點明白為何skynet被認為是輕量級項目，現在再次讀skynet源代碼時，有種豁然開朗、分外輕鬆的感覺。當然，skynet的代碼也很厲害，其在代碼盡量少的前提下，已經很好地解決她要解決的問題了。事實上，Igor Sysoev和他的團隊真的很厲害，通過對比2004年0.1.0版和2016年最新版1.1.18版的源代碼，我們就會發現nginx的整個項目基本上沒有很大的改動，而且在0.1.0版就已經實現了BSD系kqueue和Linux系epoll的支持，而且在後來的版本還能在不影響項目結構的前提下添加Windows等系統的支持，這是需要多好的設計和遠見才能達成的目標！而我認為我可以把從nginx中學習到的好好總結吸收，從而提升自己的編碼水平。以下是我的學習總結和分享：&lt;/p&gt;

&lt;h1 id=&quot;代碼風格與編程技巧草稿&quot;&gt;代碼風格與編程技巧（草稿）&lt;/h1&gt;
&lt;h2 id=&quot;1-半自文檔式的命名風格&quot;&gt;1. 半自文檔式的命名風格&lt;/h2&gt;

&lt;p&gt;大學時，我曾用Objective-C開發iOS應用，行內的人喜歡把Objective-C稱為“自文檔語言”，意思是開發者不需要看開發接口文檔，而是直接看函數命名，就能知道這個函數的作用和調用方式。而nginx也給我這種“自文檔”的感覺，其在很多函數命名都是有很嚴格的規範，讀者和用接口的人可以很容易地知道這個函數會出現在哪個頭文件中，是要達到什麼效果的，例如：ngx_log_init()這個函數，ngx說明這是nginx為了和其它第三方模塊劃分開命名空間用的，log表明這是一個ngx_log.h/c中實現的日誌相關的函數，init則說明這是一個初始化時會用到的函數；而對於類型聲明，如ngx_list_t，最後的t表明這是一個類型，ngx_connection_log_error_e，最後的e表明這是一個枚舉，這可以避免類型和函數引用的混亂，要知道nginx大量地使用函數指針。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/core/ngx_log.h 231~238
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_log_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_cdecl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_err_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_cdecl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_err_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_log_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_err_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_int_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_open_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_cycle_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_int_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_redirect_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_cycle_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_log_get_file_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_log_set_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_conf_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;nginx內部大部分的函數和變量都是很容易明白的，不過也有部分的命名需要一些思考，才能明白作者命名時的想法，例如結構體ngx_file_s中的name，需要結合上下文才能發現其實這是文件的整個路徑，而不僅僅是文件名。因此，我認為nginx的命名風格是“半自文檔式”的。&lt;/p&gt;

&lt;p&gt;自我反思：代碼命名一定要做到讀者不需要查開發文檔也能直接看懂，而nginx的方法是用一個統一的前綴ngx_來和第三方代碼（尤其是用戶自己的代碼）劃分開命名空間，用第二個單詞來區分代碼不同的功能，用第三和之後的命名來表示行為。如果是函數命名則不需要後綴，但如果是結構體和枚舉等類型，則用諸如_s和_e等後綴結尾。&lt;/p&gt;

&lt;h2 id=&quot;2-讓內存對象的生命週期更好管理&quot;&gt;2. 讓內存對象的生命週期更好管理&lt;/h2&gt;

&lt;p&gt;類似Objective-C內存管理的代碼風格，alloc函數簇用於申請對象的內存空間，init函數簇用於初始化對象的成員變量，dealloc函數用於釋放內存，同樣，nginx的命名風格也有類似的規範：&lt;/p&gt;

&lt;p&gt;在ngx_array、ngx_connection等功能實現中，create簇函數後綴意味著創建堆上的空間並調用init函數對空間進行初始化，而destroy函數則用於釋放申請到的空間。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ngx/core/ngx_array.h 25~28
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_array_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_uint_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_array_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_push_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_array_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_uint_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不過，nginx在這方面的規範也沒有到“強迫症”的程度，就像ngx_list中就沒有對應的釋放方法，這種情況很可能是因為這類功能都是基於ngx_pool來創建的，ngx_pool是nginx中用得比較廣泛的內存管理工具，設計目標是為減少內存管理所帶來的痛苦，因為nginx中通常都會為了一個特定的業務創建一個ngx_pool內存池，並把這個業務中所需要的內存都從這個內存池中申請，當這個任務完成了之後，就直接調用ngx_pfree函數把整個內存池回收掉，這就不用再為內存洩漏操心了！相比引入GC和引用計數，這個做法雖然看起來不夠geek，但卻十分實用，nginx的代碼哲學中必定有一條：純粹，功能不需要做得面面俱到，該要的接口必須要有，但不該要的功能也一個不加。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/core/ngx_palloc.h 75~86
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_create_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_destroy_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_reset_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_palloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pnalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pcalloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pmemalign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_int_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_pfree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;自我反思：誠如nginx的內存管理風格，代碼命名不僅要做到一看即懂，而且還要儘量做到統一，每個功能的類似接口都儘量使用同樣的命名方法和函數簽名，當然接口執行效果也可以類比，這樣的話讀者或者使用者就能減少學習成本和降低出錯的機率了。再往深思考，其實這和面向對象中的面向接口編程的思想有相近之處，C語言也可以很“面向對象”地編程。&lt;/p&gt;

&lt;h2 id=&quot;3-大量的防禦式編程代碼&quot;&gt;3. 大量的防禦式編程代碼&lt;/h2&gt;

&lt;p&gt;在我看來，nginx的防禦式代碼不僅多，而且是有層次，並且會伴隨著日誌紀錄。多，是因為每當要執行有可能出錯的操作時都需要作出防禦，而nginx尤其關注內存空間申請失敗，畢竟nginx在要挑戰的是系統性能極限，內存空間申請失敗是必須關注的點，因此nginx在所有涉及到內存申請的地方都做了判斷，另外，涉及系統接口調用方面，也必須對返回的結果做檢查；層次，是因為會發生的問題不一定都是嚴重的，如果防禦沒有層次，一個小小的問題就退出了整個程序，或者一個嚴重的問題也不退出程序，都是不合理的，根據ngx_log中的定義和代碼，常用的級別有EMERG、ALERT、CRIT、ERR、WARN等等；日誌，是因為當防禦式代碼生效的時候，意味著有正常狀況意外的事情發生，這可能會導致業務的錯誤，如果不把其記錄下來，那麼也許開發人員一直都不會知道有這個錯誤發生，也無法修補錯誤了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/os/unix/ngx_files.c 30~75
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ngx_read_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_file_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;off_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ngx_log_debug4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NGX_LOG_DEBUG_CORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;read: %d, %p, %uz, %O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if (NGX_HAVE_PREAD)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_log_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NGX_LOG_CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;pread() &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NGX_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ngx_log_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NGX_LOG_CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&quot;lseek() &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NGX_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_log_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NGX_LOG_CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;read() &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NGX_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;簡而言之，其哲學大概是：不相信調用（尤其是系統調用）必然能返回想要的結果，因此一定要做足夠嚴謹周密的防禦，還要把問題按重要性分別記錄下來，方便開發人員發現、重現和解決問題。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/core/ngx_log.h 8~32
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define NGX_LOG_STDERR            0
#define NGX_LOG_EMERG             1
#define NGX_LOG_ALERT             2
#define NGX_LOG_CRIT              3
#define NGX_LOG_ERR               4
#define NGX_LOG_WARN              5
#define NGX_LOG_NOTICE            6
#define NGX_LOG_INFO              7
#define NGX_LOG_DEBUG             8
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define NGX_LOG_DEBUG_CORE        0x010
#define NGX_LOG_DEBUG_ALLOC       0x020
#define NGX_LOG_DEBUG_MUTEX       0x040
#define NGX_LOG_DEBUG_EVENT       0x080
#define NGX_LOG_DEBUG_HTTP        0x100
#define NGX_LOG_DEBUG_MAIL        0x200
#define NGX_LOG_DEBUG_STREAM 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;順帶一提，雖然不屬於防禦式編程，但nginx也為防止日後有可能發生的系統接口改變而作出防備，在nginx中有很多會直接替換到系統接口的宏定義，如圖，而我認為其目的是添加一層抽象層，讓代碼調用不直接指向系統接口，那麼即使日後該系統接口發生了改變，或者需要兼容特殊操作系統的特殊系統接口，也只需要對抽象層的實現作出修改，那就不會影響到所有相關以來的調用了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/core/ngx_string.h 53~63
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ngx_strncmp(s1, s2, n)  strncmp((const char *) s1, (const char *) s2, n)
&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* msvc and icc7 compile strcmp() to inline loop */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ngx_strcmp(s1, s2)  strcmp((const char *) s1, (const char *) s2)
&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define ngx_strstr(s1, s2)  strstr((const char *) s1, (const char *) s2)
#define ngx_strlen(s)       strlen((const char *) s)
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ngx_strchr(s1, c)   strchr((const char *) s1, (int) c)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;自我反思：今後的編碼的時候要更嚴謹，必須要認真思考接口的行為及其可能會出現的問題，只要有出現問題的概率，就要進行防禦。&lt;/p&gt;

&lt;h2 id=&quot;4-用宏解決環境差異&quot;&gt;4. 用宏解決環境差異&lt;/h2&gt;

&lt;p&gt;nginx對環境差異問題非常嚴謹。從nginx的源代碼目錄結構來看，os/unix目錄下的代碼是nginx的平台相關代碼，而編譯的配置腳本(configure script)和條件編譯(conditional compile)，則是nginx解決環境差異的主要方式。&lt;/p&gt;

&lt;p&gt;第一種方式：通過configure script，決定需要編譯的代碼。如圖，os/unix目錄下有不少的代碼文件是以平台作為區分，如darwin/freebsd/linux/solaris，在auto/source腳本下，nginx定義了不同的環境編譯所需要的代碼文件，當運行configure script的時候，腳本根據所在的系統決定到底要把哪些代碼文件加入到編譯參數中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// src/os/unix
ngx_darwin.h
ngx_darwin_config.h
ngx_darwin_init.c
ngx_freebsd.h
ngx_freebsd_config.h
ngx_freebsd_init.c
ngx_freebsd_sendfile_chain.c
ngx_linux.h
ngx_linux_aio_read.c
ngx_linux_config.h
ngx_linux_init.c
ngx_linux_sendfile_chain.c
ngx_solaris.h
ngx_solaris_config.h
ngx_solaris_init.c
ngx_solaris_sendfilev_chain.c
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/sources 189~205

&lt;span class=&quot;nv&quot;&gt;FREEBSD_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/os/unix/ngx_freebsd_config.h src/os/unix/ngx_freebsd.h&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FREEBSD_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_freebsd_init.c
&lt;span class=&quot;nv&quot;&gt;FREEBSD_SENDFILE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_freebsd_sendfile_chain.c

&lt;span class=&quot;nv&quot;&gt;LINUX_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/os/unix/ngx_linux_config.h src/os/unix/ngx_linux.h&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LINUX_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_linux_init.c
&lt;span class=&quot;nv&quot;&gt;LINUX_SENDFILE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_linux_sendfile_chain.c


&lt;span class=&quot;nv&quot;&gt;SOLARIS_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/os/unix/ngx_solaris_config.h src/os/unix/ngx_solaris.h&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SOLARIS_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_solaris_init.c
&lt;span class=&quot;nv&quot;&gt;SOLARIS_SENDFILEV_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_solaris_sendfilev_chain.c


&lt;span class=&quot;nv&quot;&gt;DARWIN_DEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/os/unix/ngx_darwin_config.h src/os/unix/ngx_darwin.h&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DARWIN_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_darwin_init.c
&lt;span class=&quot;nv&quot;&gt;DARWIN_SENDFILE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/os/unix/ngx_darwin_sendfile_chain.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如圖，nginx也用了同樣的方法來兼容不同平台的事件驅動介面。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SELECT_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_select_module
&lt;span class=&quot;nv&quot;&gt;SELECT_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_select_module.c
&lt;span class=&quot;nv&quot;&gt;WIN32_SELECT_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_win32_select_module.c

&lt;span class=&quot;nv&quot;&gt;POLL_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_poll_module
&lt;span class=&quot;nv&quot;&gt;POLL_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_poll_module.c

&lt;span class=&quot;nv&quot;&gt;KQUEUE_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_kqueue_module
&lt;span class=&quot;nv&quot;&gt;KQUEUE_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_kqueue_module.c

&lt;span class=&quot;nv&quot;&gt;DEVPOLL_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_devpoll_module
&lt;span class=&quot;nv&quot;&gt;DEVPOLL_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_devpoll_module.c

&lt;span class=&quot;nv&quot;&gt;EVENTPORT_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_eventport_module
&lt;span class=&quot;nv&quot;&gt;EVENTPORT_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_eventport_module.c

&lt;span class=&quot;nv&quot;&gt;EPOLL_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_epoll_module
&lt;span class=&quot;nv&quot;&gt;EPOLL_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_epoll_module.c

&lt;span class=&quot;nv&quot;&gt;IOCP_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngx_iocp_module
&lt;span class=&quot;nv&quot;&gt;IOCP_SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/event/modules/ngx_iocp_module.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// src/event/modules

ngx_devpoll_module.c
ngx_epoll_module.c
ngx_eventport_module.c
ngx_kqueue_module.c
ngx_poll_module.c
ngx_select_module.c
ngx_win32_select_module.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;順便一提，nginx還有一種十分厲害的編程方法，巧妙地利用函數指針，實現了類似面向對象語言的“面向接口編程”，思路是把統一同一行為的函數的函數指針，函數指針在初始化的時候賦值到結構體中，而在調用函數時不是通過直接調用函數，而是通過調用結構體中的函數指針，那麼就可以做到底層實現對上層用戶透明了。
例如ngx_event.h中的ngx_event_module_t結構體，其定義了事件驅動介面所需要的函數指針變量，而在ngx_kqueue_module.c文件中則聲明全局變量ngx_kqueue_module_ctx，並對其變量賦以對應的函數指針。在要使用的時候，用戶只需直接用結構體的函數指針變量傳遞正確的參數，即可獲得正確的行為，而無需關心實際調用的函數是什麼，內部的運作原理是怎樣的。也提高了代碼的靈活性，降低了耦合度，即使需要改變或擴展實現，也無需修改本來的函數，只需要增加一個函數簽名相同的函數，把結構體中的函數指針替換掉即可。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/event/ngx_event.h 446~453
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngx_str_t&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_cycle_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_cycle_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ngx_event_actions_t&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_event_module_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/event/modules/ngx_kqueue_module.c 76~98
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_event_module_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ngx_kqueue_module_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kqueue_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngx_kqueue_create_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;cm&quot;&gt;/* create configuration */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngx_kqueue_init_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                  &lt;span class=&quot;cm&quot;&gt;/* init configuration */&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_add_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/* add an event */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_del_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/* delete an event */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_add_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/* enable an event */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_del_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/* disable an event */&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                              &lt;span class=&quot;cm&quot;&gt;/* add an connection */&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                              &lt;span class=&quot;cm&quot;&gt;/* delete an connection */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef EVFILT_USER
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;cm&quot;&gt;/* trigger a notify */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                              &lt;span class=&quot;cm&quot;&gt;/* trigger a notify */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_process_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* process the events */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;cm&quot;&gt;/* init the events */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ngx_kqueue_done&lt;/span&gt;                    &lt;span class=&quot;cm&quot;&gt;/* done the events */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;第二種方式：通過條件編譯，決定不同環境所要編譯的代碼。在nginx成功配置後，會生成objs目錄以及ngx_auto_config.h頭文件，在該頭文件中定義了當前操作系統環境的宏定義，如#define NGX_HAVE_KQUEUE  1表示使用kqueue作為事件驅動介面，#define NGX_DARWIN  1表示目前的操作系統內核基於Darwin。而在nginx有大量根據環境相關的宏定義來進行條件編譯的代碼，如圖，在ngx_thread_id.c這個實現文件中，nginx定義了不同的系統環境的ngx_thread_tid函數的實現，而在預處理的時候通過宏定義來決定哪段代碼才是真正用於編譯的代碼。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/os/unix/ngx_thread_id.c 13~70
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if (NGX_LINUX)
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
 * Linux thread id is a pid of thread created by clone(2),
 * glibc does not provide a wrapper for gettid().
 */&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ngx_tid_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ngx_thread_tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYS_gettid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#elif (NGX_FREEBSD) &amp;amp;&amp;amp; (__FreeBSD_version &amp;gt;= 900031)
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pthread_np.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_tid_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ngx_thread_tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_getthreadid_np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#elif (NGX_DARWIN)
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
 * MacOSX thread has two thread ids:
 *
 * 1) MacOSX 10.6 (Snow Leoprad) has pthread_threadid_np() returning
 *    an uint64_t value, which is obtained using the __thread_selfid()
 *    syscall.  It is a number above 300,000.
 */&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ngx_tid_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ngx_thread_tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_threadid_np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * 2) Kernel thread mach_port_t returned by pthread_mach_thread_np().
 *    It is a number in range 100-100,000.
 *
 * return pthread_mach_thread_np(pthread_self());
 */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngx_tid_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ngx_thread_tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;順帶一提，nginx的條件編譯不僅用於解決環境差異問題，還用於debug模式的開關。我曾經思考nginx的宏是否過於氾濫，甚至是否有必要因為宏的危險而不使用宏，但實際上有很多情況我們都無法避免使用宏，例如在ngx_log中，ngx_log_debug簇調試日誌接口，在調試模式的時候ngx_log_debug會被替換為ngx_log_debug_core函數，而非調試模式時則被替換為空白，也就是在非調試的情況下，可以減少了一次函數的調用，而不需要進入函數後判斷是否為調試模式，減少不必要的判斷和函數調用棧。&lt;/p&gt;

&lt;p&gt;自我反思：不要盡信教科書和網友說的，我們要用理性的方式對待macro，只要不要濫用，使用得當，其實macro是個好東西。很多情況下不能避免要使用到macro，畢竟macro是預處理階段的強大工具，在很多情況下我們並不需要運行時的動態性，只需要編譯的時候確定下來，這個時候我們就應該使用macro，通過降低運行時的動態性來換取更好的運行性能。&lt;/p&gt;

&lt;h2 id=&quot;5-解決循環引用問題&quot;&gt;5. 解決循環引用問題&lt;/h2&gt;

&lt;p&gt;誰不曾陷入循環引用的苦惱當中，即使儘量把#include放到實現文件中，但也很難避免在頭文件的結構體定義時需要互相引用，如果多次重複的前置聲明（forward declaration）又有可能導致編譯器警告。而nginx的解決方案是我看過的最好的解決方案，既能解決重複引用，又能解決重複前置聲明：&lt;/p&gt;

&lt;p&gt;首先我們來思考一下預處理器的處理方式，預處理器會把頭文件按照引用順序整理成一個文件，而循環引用就是因為這個過程中頭文件多次互相引入，導致預處理器拋出異常中斷編譯。Forward declaration是解決這個問題的最佳辦法，而要解決的問題就是多次forward declaration的問題了。Nginx的解決辦法則是用一個總頭文件來進行頭文件（/src/core/ngx_core.h）引入，有點類似objc項目的pch文件，把所有項目的頭文件都加到了這個預編譯頭文件中，至於如何解決多次前置聲明的問題，nginx在這個總頭文件的開頭為有可能會被不同頭文件使用的結構體統一做了一次前置聲明，那麼就不再需要在其它頭文件中做重複的前置聲明了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/core/ngx_core.h 12~92
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ngx_config.h&amp;gt;
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_module_s&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;ngx_module_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_conf_s&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngx_conf_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_cycle_s&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ngx_cycle_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_pool_s&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngx_pool_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_chain_s&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ngx_chain_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_log_s&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ngx_log_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_open_file_s&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ngx_open_file_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_command_s&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ngx_command_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_file_s&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngx_file_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_event_s&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ngx_event_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_event_aio_s&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ngx_event_aio_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_connection_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ngx_connection_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if (NGX_THREADS)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngx_thread_task_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ngx_thread_task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_event_handler_pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_event_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_connection_handler_pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngx_connection_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cp&quot;&gt;#define  NGX_OK          0
#define  NGX_ERROR      -1
#define  NGX_AGAIN      -2
#define  NGX_BUSY       -3
#define  NGX_DONE       -4
#define  NGX_DECLINED   -5
#define  NGX_ABORT      -6
&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ngx_errno.h&amp;gt;
#include &amp;lt;ngx_atomic.h&amp;gt;
#include &amp;lt;ngx_thread.h&amp;gt;
#include &amp;lt;ngx_rbtree.h&amp;gt;
#include &amp;lt;ngx_time.h&amp;gt;
#include &amp;lt;ngx_socket.h&amp;gt;
#include &amp;lt;ngx_string.h&amp;gt;
#include &amp;lt;ngx_files.h&amp;gt;
#include &amp;lt;ngx_shmem.h&amp;gt;
#include &amp;lt;ngx_process.h&amp;gt;
#include &amp;lt;ngx_user.h&amp;gt;
#include &amp;lt;ngx_dlopen.h&amp;gt;
#include &amp;lt;ngx_parse.h&amp;gt;
#include &amp;lt;ngx_parse_time.h&amp;gt;
#include &amp;lt;ngx_log.h&amp;gt;
#include &amp;lt;ngx_alloc.h&amp;gt;
#include &amp;lt;ngx_palloc.h&amp;gt;
#include &amp;lt;ngx_buf.h&amp;gt;
#include &amp;lt;ngx_queue.h&amp;gt;
#include &amp;lt;ngx_array.h&amp;gt;
#include &amp;lt;ngx_list.h&amp;gt;
#include &amp;lt;ngx_hash.h&amp;gt;
#include &amp;lt;ngx_file.h&amp;gt;
#include &amp;lt;ngx_crc.h&amp;gt;
#include &amp;lt;ngx_crc32.h&amp;gt;
#include &amp;lt;ngx_murmurhash.h&amp;gt;
#if (NGX_PCRE)
#include &amp;lt;ngx_regex.h&amp;gt;
#endif
#include &amp;lt;ngx_radix_tree.h&amp;gt;
#include &amp;lt;ngx_times.h&amp;gt;
#include &amp;lt;ngx_rwlock.h&amp;gt;
#include &amp;lt;ngx_shmtx.h&amp;gt;
#include &amp;lt;ngx_slab.h&amp;gt;
#include &amp;lt;ngx_inet.h&amp;gt;
#include &amp;lt;ngx_cycle.h&amp;gt;
#include &amp;lt;ngx_resolver.h&amp;gt;
#if (NGX_OPENSSL)
#include &amp;lt;ngx_event_openssl.h&amp;gt;
#endif
#include &amp;lt;ngx_process_cycle.h&amp;gt;
#include &amp;lt;ngx_conf_file.h&amp;gt;
#include &amp;lt;ngx_module.h&amp;gt;
#include &amp;lt;ngx_open_file_cache.h&amp;gt;
#include &amp;lt;ngx_os.h&amp;gt;
#include &amp;lt;ngx_connection.h&amp;gt;
#include &amp;lt;ngx_syslog.h&amp;gt;
#include &amp;lt;ngx_proxy_protocol.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;還有一點比較特別的是，nginx的頭文件引入使用的是尖括號，而不是雙引號。通常，大家在引入頭文件時都習慣直接用雙括號引入，為什麼nginx需要這樣做呢？個人認為可能是因為nginx需要支持第三方擴展開發，第三方開發者需要在代碼中可以引入nginx內部的頭文件，還可能是因為用尖括號的方式引入頭文件，看起來比較好看，但這只是個人的猜想，進一步的原因還有待研究查實。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/sources 8

&lt;span class=&quot;nv&quot;&gt;CORE_INCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/core&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// auto/make 241~245

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NGX_PCH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(CC) &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_compile_opt&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(CFLAGS) &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_use_pch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(ALL_INCS)&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ngx_cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(CC) &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ngx_compile_opt&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(CFLAGS) &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(CORE_INCS)&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;自我反思：想讓自己的項目代碼結構更加整潔，同時解決循環引用的問題，就應該參考nginx的這種項目結構，同時結合一些編譯指令的技巧，讓項目結構更美觀。&lt;/p&gt;</content><summary type="html">If I have been able to see further, it was only because I stood on the shoulder of giants.


最近我花了不少時間研究nginx的源代碼，確實讓我受益匪淺。果然，當攀上巨人的肩膀去看這個世界時，風光真的和地上的截然不同。回想起之前我研究過的同為server應用框架的skynet，我有點明白為何skynet被認為是輕量級項目，現在再次讀skynet源代碼時，有種豁然開朗、分外輕鬆的感覺。當然，skynet的代碼也很厲害，其在代碼盡量少的前提下，已經很好地解決她要解決的問題了。事實上，Igor Sysoev和他的團隊真的很厲害，通過對比2004年0.1.0版和2016年最新版1.1.18版的源代碼，我們就會發現nginx的整個項目基本上沒有很大的改動，而且在0.1.0版就已經實現了BSD系kqueue和Linux系epoll的支持，而且在後來的版本還能在不影響項目結構的前提下添加Windows等系統的支持，這是需要多好的設計和遠見才能達成的目標！而我認為我可以把從nginx中學習到的好好總結吸收，從而提升自己的編碼水平。以下是我的學習總結和分享：</summary></entry></feed>
